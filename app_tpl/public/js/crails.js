// Generated by CoffeeScript 1.3.3
(function() {
  var Form, Link;

  Form = (function() {

    Form.prototype.Initialize = function() {
      return $('form').each(function() {
        return new Form($(this));
      });
    };

    function Form(element) {
      var method,
        _this = this;
      var csrf_token = $('meta[name="csrf-token"]');
      this.form = element;
      (this.form.find('.form-actions button[type="reset"]')).click(function() {
        return _this.Cancel();
      });
      method = (this.form.attr('method'));
      if (typeof method == 'undefined')
        method = 'GET';
      else
        method = method.toUpperCase();
      if (method !== 'POST' && method !== 'GET') {
        this.form.append("<input type='hidden' name='_method' value='" + method + "' />");
        this.form.attr('method', 'POST');
      }
      if (csrf_token.length > 0)
        this.form.append("<input type='hidden' name='csrf-token' value='" + csrf_token.attr('content') + "' />");
      this.DomValidate();
    }

    Form.prototype.Cancel = function() {
      var default_name, fields;
      default_name = 'data-default-value';
      fields = this.form.find("[" + default_name + "]");
      return fields.each(function() {
        return $(this).attr('value', $(this).attr(default_name));
      });
    };

    Form.prototype.ValidateField = function(error, field) {
      return field.next().html(error);
    };

    Form.prototype.DomValidate = function() {
      var rules,
        _this = this;
      if (typeof $.validate == "undefined")
      {
        console.log("crails.js", "jquery.validate hasn't been required, form validation is disabled for crails.js");
        return null;
      }
      rules = {};
      (this.form.find('[name][data-validate]')).each(function() {
        var name, validate_cmd;
        name = $(this).attr('name');
        validate_cmd = $(this).attr('data-validate');
        return rules[name] = validate_cmd;
      });
      return this.form.validate({
        rules: rules,
        errorPlacement: function(error, element) {
          return _this.ValidateField(error, element);
        }
      });
    };

    return Form;

  })();

  Link = (function() {

    Link.prototype.Initialize = function() {
      return $('a[data-method]').each(function() {
        return new Link($(this));
      });
    };

    Link.prototype.GoTo = function(method, url) {
      var fake_form, metadata;
      fake_form = $("<form method='post' action='" + url + "'></form>");
      metadata  = "<input type='hidden' name='_method' value='" + method + "' />";
      metadata += "<input type='hidden' name='csrf-token' value='" + $('meta[name="csrf-token"]').attr('content') + "' />";
      fake_form.hide();
      fake_form.append(metadata);
      return fake_form.submit();
    };

    function Link(element) {
      var _this = this;
      this.base = element;
      this.base.click(function(event) {
        return _this.Clicked(event);
      });
    }

    Link.prototype.Clicked = function(event) {
      var can_run, confirm_text, method, path;
      event.preventDefault();
      path = this.base.attr('href');
      method = this.base.attr('data-method').toUpperCase();
      confirm_text = this.base.attr('data-confirm');
      can_run = true;
      if (confirm_text !== '' && !(confirm(confirm_text))) {
        can_run = false;
      }
      if (can_run) {
        return Link.prototype.GoTo(method, path);
      }
    };

    return Link;

  })();

  $(document).ready(function() {
    Form.prototype.Initialize();
    return Link.prototype.Initialize();
  });

}).call(this);
