#include <algorithm>
#include "app/models/<%= filename %>.hpp"
<% requires.each do |required_file| -%>
#include "app/models/<%= required_file %>.hpp"
<% end -%>

using namespace std;
using namespace MongoDB;
using namespace Crails;

#define COLLECTION CRAILS_DATABASE(MongoDB,<%= classname %>::DatabaseName())[<%= classname %>::CollectionName()]

<%= classname %>::<%= classname %>(Data params) : Model(COLLECTION, data_to_bson(params))
{
  initialize_fields();
}

<%= classname %>::<%= classname %>(MongoDB::Collection& collection, mongo::BSONObj bson_object) : Model(collection, bson_object)
{
  initialize_fields();
}

<%= classname %>::<%= classname %>(const <%= classname %>& copy) : Model(copy)
{
  initialize_fields();
}

mongo::BSONObj <%= classname %>::data_to_bson(Data params)
{
  mongo::BSONObjBuilder builder;

  if (!(params.Nil()))
  {
    for_each(params.begin(), params.end(), [&builder](Data param)
    {
      builder << param.Key() << param.Value();
    });
  }
  return builder.obj();
}

SmartPointer<<%= classname %>> <%= classname %>::Find(const string& id_string)
{
  mongo::OID id;

  if (id_string.size() == 24)
    id.init(id_string);
  if (!(id.isSet()))
    throw MongoDB::Exception(string("Invalid call to <%= classname %>::Find with OID '") + id_string + '\'');
  else
  {
    SmartPointer<MongoDB::Criteria<<%= classname %>> > results = MongoDB::Criteria<<%= classname %>>::prepare(MONGO_QUERY("_id" << id));
    SmartPointer<<%= classname %>>                      result(nullptr);

    results->set_limit(1);
    if (results->entries().size() > 0)
      result = new <%= classname %>(results->entries().front());
    return (result);
  }
}

<%= classname %> <%= classname %>::Create(Data params)
{
  return (<%= classname %>(params));
}

// FIELDS
void <%= classname %>::initialize_fields()
{
  MongoDB::Model::initialize_fields();
<% fields.each do |field| -%>
  <%= field[:name] %>.initialize("<%= field[:name] %>", bson_object, <%= field[:default] %>);
  fields.push_back(&<%= field[:name] %>);
<% end -%>
  fields_initialized = true;
}

DynStruct <%= classname %>::to_data() const
{
  DynStruct data;

<% fields.each do |field| -%>
  data["<%= field[:name] %>"] = get_<%= field[:name] %>();
<% end -%>
  return data;
}

<% fields.each do |field| %>
<%= field[:type] %> <%= classname %>::get_<%= field[:name] %>(void) const
{
  return <%= field[:name] %>.Get();
}

void <%= classname %>::set_<%= field[:name] %>(<%= field[:type] %> value)
{
  <%= field[:name] %>.Set(value);
}
<% end %>

// RELATIONS
// belongs_to
<% belongs_to.each do |data| %>
void <%= classname %>::set_<%= data[:relation_name] %>_id(const std::string& id_string)
{
  MongoDB::Model::set_owner_id("<%= data[:relation_name] %>_id", id_string);
}

SP(<%= data[:type] %>) <%= classname %>::get_<%= data[:relation_name] %>(void) const
{
  const string         database        = <%= data[:type] %>::DatabaseName();
  const string         collection_name = <%= data[:type] %>::CollectionName();
  MongoDB::Collection& collection      = CRAILS_DATABASE(MongoDB, database)[collection_name];
  mongo::OID           foreign_oid     = get_<%= data[:relation_name] %>_id();
  mongo::Query         query           = MONGO_QUERY("_id" << foreign_oid);
  auto                 ptr             = collection.query(query);

  if (ptr->more())
    return (SP(<%= data[:type] %>)(new <%= data[:type] %>(collection, ptr->next())));
  return (SP(<%= data[:type] %>)());
}
<% end %>

// has_one
<% has_one.each do |data| %>
SP(<%= data[:type] %>) <%= classname %>::get_<%= data[:relation_name] %>(void) const
{
  std::string  association      = <%= data[:type] %>::CollectionName();
  std::string  association_name = "<%= data[:remote_field] + "_id" %>";
  mongo::Query query            = MONGO_QUERY(association_name << OID());
  SP(MongoDB::Criteria<<%= data[:type] %>>) results = MongoDB::Criteria<<%= data[:type] %>>::prepare(collection.get_database()[association], query);

  if (results->Count() == 0)
    return (SP(<%= data[:type] %>)());
  return (new <%= data[:type] %>(results->entries().front()));
}
<% end %>

// has_many
<% has_many.each do |data| %>
SP(MongoDB::HasMany<<%= data[:type] %>>) <%= classname %>::get_<%= data[:relation_name] %>s (void) const
{
  std::string      association      = <%= data[:type] %>::CollectionName();
  std::string      association_name = "<%= data[:remote_field] + "_id" %>";
  return MongoDB::HasMany<<%= data[:type] %>>::prepare(collection.get_database()[association], association_name, OID());
}
<% end %>

// has_and_belongs_to_many
<% has_and_belongs_to_many.each do |data| %>

SP(MongoDB::Criteria<<%= data[:type] %>>) <%= classname %>::get_<%= data[:relation_name] %>s (void) const
{
  SP(MongoDB::Criteria<<%= data[:type] %>>) ptr;

<% if data[:host] == true %>
  ptr = MongoDB::Criteria<<%= data[:type] %>>::prepare(collection.get_database()[<%= data[:type] %>::CollectionName()], BSON("_id" << BSON("$in" << get_<%= data[:relation_name] %>_ids())));
  <% else %>
  ptr = MongoDB::Criteria<<%= data[:type] %>>::prepare(collection.get_database()[<%= data[:type] %>::CollectionName()], BSON("<%= data[:foreign_key] %>_ids" << OID()));
  <% end %>
  return (ptr);
}

void <%= classname %>::add_to_<%= data[:relation_name] %>s (<%= 'const ' if data[:host] == true %><%= data[:type] %>& model) <%= 'const' if data[:host] != true %>
{
  <% if data[:host] == true %>
  std::vector<mongo::OID> oids = get_<%= data[:relation_name] %>_ids();

  oids.push_back(model.OID());
  set_<%= data[:relation_name] %>_ids(oids);
  <% else %>
  std::vector<mongo::OID> oids = model.get_<%= data[:foreign_name] %>_ids();

  oids.push_back(OID());
  model.set_<%= data[:foreign_name] %>_ids(oids);
  <% end %>
}

void <%= classname %>::remove_from_<%= data[:relation_name] %>s (<%= 'const ' if data[:host] == true %><%= data[:type] %>& model) <%= 'const' if data[:host] != true %>
{
  <% if data[:host] == true %>
  std::vector<mongo::OID> oids = get_<%= data[:relation_name] %>_ids();

  std::remove(oids.begin(), oids.end(), model.OID());
  set_<%= data[:relation_name] %>_ids(oids);
  <% else %>
  std::vector<mongo::OID> oids = model.get_<%= data[:foreign_name] %>_ids();

  std::remove(oids.begin(), oids.end(), OID());
  model.set_<%= data[:foreign_name] %>_ids(oids);
  <% end %>
}

<% end %>
